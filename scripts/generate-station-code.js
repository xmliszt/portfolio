const fs = require('fs');
const path = require('path');

// Read all station files
const stationsDir = path.join(__dirname, '../app/craft/stations');
const outputFile = path.join(
  __dirname,
  '../app/craft/__generated__/generated-stations.ts'
);

// Get all sub-folders, each folder is a station
const stationFolders = fs
  .readdirSync(stationsDir)
  .filter((file) => fs.statSync(path.join(stationsDir, file)).isDirectory());

// Derive map of station-id (folder name) to the code.
const stations = stationFolders.reduce((acc, folder) => {
  const folderPath = path.join(stationsDir, folder);
  const filesInFolder = fs.readdirSync(folderPath);
  return {
    ...acc,
    [folder]: filesInFolder.map((file) => {
      const filePath = path.join(folderPath, file);
      const content = fs.readFileSync(filePath, 'utf8');
      return {
        name: file,
        content,
      };
    }),
  };
}, {});

// Create output directory if it doesn't exist
const outputDir = path.dirname(outputFile);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Generate the output
let output = `// Auto-generated file - DO NOT EDIT
// Generated by generate-station-code.js

export const stations = {
`;

/**
 * Output each station as an object:
 * {
 *   <station-id: {
 *      <file-name>: <file-content>
 *   }
 * }
 */

Object.entries(stations).forEach(([stationId, files]) => {
  output += `  '${stationId}': {\n`;
  files.forEach((file) => {
    // Escape backticks and interpolation markers for template strings
    const escapedContent = file.content
      .replace(/`/g, '\\`')
      .replace(/\${/g, '\\${');
    output += `    '${file.name}': \`${escapedContent}\`,\n`;
  });
  output += `  },\n`;
});

output += `} as const;\n`;

// Write the output file
fs.writeFileSync(outputFile, output);
console.log(
  `Generated ${Object.keys(stations).length} station code strings in ${outputFile}`
);
